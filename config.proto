package beelint;

// The configuration consumed by beelint.py.
message BeelintConfig {
  optional string username = 1;

  // The goal where lint violations should be posted.
  optional string lint_goalname = 2;

  repeated PermittedEepEntry permitted_eep_entry = 3;

  // The id of the calendar to read for CalendarPatterns.
  optional string calendar_id = 4 [default = "primary"];

  // Additional options about individual goals.
  repeated GoalMetadata goal_metadata = 5;
}

// A set of Beeminder goals and DatePatterns for which they are allowed to eep!.
// A goal not covered by a PermittedEepEntry is allowed to eep! on any day.
//
// If multiple PermittedEepEntrys apply to the same goal, the goal is in
// violation if it violates any of them in isolation. If multiple patterns
// are provided on a PermittedEepEntrys, the goal is in violation if it
// violates any of them in isolation.
//
// If a goal is, at first glance, in an illegal state, we then check
// if there is a forbidden day followed by a legal day between now and
// the goal's eep! day. The idea is that we want to lint on the first day
// of the last consecutive permitted block. For example, if the idea is to
// make a goal weekends only, we do not want to lint a weekday eep! goal
// if there is another weekend between now and then.
//
// There are optional start_dates on both the PermittedEepEntry and its
// nested DatePattern which is slightly confusing. In general,
// PermittedEepEntry.start_date will be compared against today's date while
// PermittedEepEntry.date_pattern.start_date will be compared against
// the eep! date of each goal individually. For example, if you leave for
// vacation on April 10th but don't want to be linted for it until April 1,
// you want to set PermittedEepEntry.start_date to April 1 and
// PermittedEepEntry.date_pattern.start_date to April 10.
message PermittedEepEntry {
  // If missing, apply to all goals (except lint_goalname).
  repeated string goalname = 1;
  // A whitelist of acceptable eep! days for goals covered by this entry.
  optional DatePattern date_pattern = 2;

  // First day to enforce the entry. If missing, always in force.
  // Format: %Y-%m-%d
  optional string start_date = 3;

  // A whitelist of acceptable eep! days for goals covered by this entry.
  optional CalendarPattern calendar_pattern = 4;
}

message DatePattern {
  enum Weekday {
      MONDAY = 0;
      TUESDAY = 1;
      WEDNESDAY = 2;
      THURSDAY = 3;
      FRIDAY = 4;
      SATURDAY = 5;
      SUNDAY = 6;
  }

  // Include only days of the week specified. If missing, exclude all days.
  repeated Weekday specific_weekday = 1;
  // First day to enforce the pattern. If missing, always in force.
  // Format: %Y-%m-%d
  // Must be less than end_date if both are specified.
  optional string start_date = 3;
  // Last day to enforce the pattern. If missing, always in force.
  // Format: %Y-%m-%d
  // Must be greater than start_date if both are specified.
  optional string end_date = 4;
}

message CalendarPattern {
  // A regex to apply to event names. The CalendarPattern matches events that match.
  optional string name_regex = 1;

  // Return the set of days that do NOT match instead.
  optional bool invert = 2 [default = false];
}

message GoalMetadata {
  optional string goalname = 1;

  // If set, this goal will not generate lint errors if it has data entered
  // today. This is useful for true/false goals which can only get one
  // data point per day.
  optional bool always_valid_if_data_today = 2;
}
